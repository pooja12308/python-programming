1. Introduction to Databases & SQL
What is a database, DBMS, RDBMS
Difference between SQL & NoSQL
SQL categories: DDL, DML, DCL, TCL
2. Data Definition Language (DDL)
CREATE DATABASE, CREATE TABLE
Data types (INT, VARCHAR, DATE, DECIMAL, etc.)
Constraints:
PRIMARY KEY
FOREIGN KEY
NOT NULL
UNIQUE
CHECK
DEFAULT
ALTER TABLE (add/modify/drop column)
DROP TABLE, TRUNCATE
3. Data Manipulation Language (DML)
INSERT INTO (single row, multiple rows)
UPDATE (with WHERE)
DELETE vs TRUNCATE
4. Basic Queries
SELECT basics
WHERE conditions (comparison, logical operators, BETWEEN, IN, LIKE)
Sorting: ORDER BY (ASC/DESC)
Limiting results: LIMIT, TOP (depends on DB)
Removing duplicates: DISTINCT
5. Aggregate Functions
COUNT, SUM, AVG, MIN, MAX
GROUP BY
HAVING (difference between WHERE and HAVING)
6. Joins
Types of Joins:
INNER JOIN
LEFT JOIN / RIGHT JOIN
FULL JOIN
CROSS JOIN
Self Join
Using multiple joins
7. Subqueries
Simple subquery in WHERE
Subquery in FROM
 
Scenario: Design the database for a hospital.
Tasks:
Create a table Patients with columns: patient_id, name, email, phone, city.
patient_id should be primary key.
email must be unique.
phone cannot be NULL.
Create a table Doctors with columns: doctor_id, name, specialization, phone, fees.
doctor_id primary key.
fees > 0 (CHECK).
Create a table Appointments with columns: appointment_id, patient_id, doctor_id, appointment_date.
appointment_id â†’ primary key.
patient_id references Patients(patient_id).
doctor_id references Doctors(doctor_id).
Alter table Patients to add column age.
 
Scenario: Manage hospital data.
Tasks:
Insert 5 patients, 5 doctors.
Update the fees of one doctor.
Delete one patient (be careful of FK constraints).
Increase fees of all cardiologists by 200.
 
Basic Queries (SELECT / WHERE / ORDER BY / DISTINCT / LIMIT)
Scenario: Fetch hospital info.
Tasks:
List all patients from Hyderabad.
Show all doctors who charge more than 1000.
List unique cities of patients.
Show top 3 most expensive doctors (highest fees).
Show all patients ordered alphabetically by name.
 
Basic Queries (SELECT / WHERE / ORDER BY / DISTINCT / LIMIT)
Scenario: Fetch hospital info.
Tasks:
List all patients from Hyderabad.
Show all doctors who charge more than 1000.
List unique cities of patients.
Show top 3 most expensive doctors (highest fees).
Show all patients ordered alphabetically by name.
 
Aggregate Functions + GROUP BY + HAVING
Scenario: Analyze hospital activities.
Tasks:
Find total number of patients.
Find total revenue from all appointments (sum of doctor fees).
Find average doctor consultation fee.
Show total appointments handled by each doctor.
Show doctors who handled more than 3 appointments (HAVING).
 
Joins (INNER, LEFT, RIGHT, FULL)
Scenario: Combine data across tables.
Tasks:
Show all appointments with patient name and doctor name.
List all patients who consulted "Dr. Ramesh".
Find patients who never booked any appointment (LEFT JOIN).
Show doctor names along with total patients consulted.
Show all doctors and their patients (FULL JOIN, if supported).
 
Subqueries
Scenario: Advanced lookups.
Tasks:
Find doctors who charge above the average consultation fee.
Find patients who consulted "Cardiologist".
Get the doctor with the maximum fee (using subquery).
List patients who booked appointments with the top 3 doctors (by appointment count).
Show all doctors who never got any appointment.
 